package music.chaanel.com.musicchannel.gen;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import music.chaanel.com.musicchannel.homepage.beans.HomeWrapBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HOME_WRAP_BEAN".
*/
public class HomeWrapBeanDao extends AbstractDao<HomeWrapBean, Long> {

    public static final String TABLENAME = "HOME_WRAP_BEAN";

    /**
     * Properties of entity HomeWrapBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property HomeId = new Property(1, Long.class, "homeId", false, "HOME_ID");
        public final static Property Type = new Property(2, int.class, "type", false, "TYPE");
        public final static Property Title = new Property(3, String.class, "title", false, "TITLE");
        public final static Property ShowTitle = new Property(4, String.class, "showTitle", false, "SHOW_TITLE");
        public final static Property Size = new Property(5, int.class, "size", false, "SIZE");
        public final static Property PathKey = new Property(6, String.class, "pathKey", false, "PATH_KEY");
        public final static Property EnTitle = new Property(7, String.class, "enTitle", false, "EN_TITLE");
    }

    private DaoSession daoSession;

    private Query<HomeWrapBean> homeBean_DataQuery;

    public HomeWrapBeanDao(DaoConfig config) {
        super(config);
    }
    
    public HomeWrapBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HOME_WRAP_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"HOME_ID\" INTEGER," + // 1: homeId
                "\"TYPE\" INTEGER NOT NULL ," + // 2: type
                "\"TITLE\" TEXT," + // 3: title
                "\"SHOW_TITLE\" TEXT," + // 4: showTitle
                "\"SIZE\" INTEGER NOT NULL ," + // 5: size
                "\"PATH_KEY\" TEXT," + // 6: pathKey
                "\"EN_TITLE\" TEXT);"); // 7: enTitle
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HOME_WRAP_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HomeWrapBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long homeId = entity.getHomeId();
        if (homeId != null) {
            stmt.bindLong(2, homeId);
        }
        stmt.bindLong(3, entity.getType());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String showTitle = entity.getShowTitle();
        if (showTitle != null) {
            stmt.bindString(5, showTitle);
        }
        stmt.bindLong(6, entity.getSize());
 
        String pathKey = entity.getPathKey();
        if (pathKey != null) {
            stmt.bindString(7, pathKey);
        }
 
        String enTitle = entity.getEnTitle();
        if (enTitle != null) {
            stmt.bindString(8, enTitle);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HomeWrapBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long homeId = entity.getHomeId();
        if (homeId != null) {
            stmt.bindLong(2, homeId);
        }
        stmt.bindLong(3, entity.getType());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String showTitle = entity.getShowTitle();
        if (showTitle != null) {
            stmt.bindString(5, showTitle);
        }
        stmt.bindLong(6, entity.getSize());
 
        String pathKey = entity.getPathKey();
        if (pathKey != null) {
            stmt.bindString(7, pathKey);
        }
 
        String enTitle = entity.getEnTitle();
        if (enTitle != null) {
            stmt.bindString(8, enTitle);
        }
    }

    @Override
    protected final void attachEntity(HomeWrapBean entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public HomeWrapBean readEntity(Cursor cursor, int offset) {
        HomeWrapBean entity = new HomeWrapBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // homeId
            cursor.getInt(offset + 2), // type
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // title
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // showTitle
            cursor.getInt(offset + 5), // size
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // pathKey
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // enTitle
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HomeWrapBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setHomeId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setType(cursor.getInt(offset + 2));
        entity.setTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setShowTitle(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSize(cursor.getInt(offset + 5));
        entity.setPathKey(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setEnTitle(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(HomeWrapBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(HomeWrapBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(HomeWrapBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "data" to-many relationship of HomeBean. */
    public List<HomeWrapBean> _queryHomeBean_Data(Long homeId) {
        synchronized (this) {
            if (homeBean_DataQuery == null) {
                QueryBuilder<HomeWrapBean> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.HomeId.eq(null));
                homeBean_DataQuery = queryBuilder.build();
            }
        }
        Query<HomeWrapBean> query = homeBean_DataQuery.forCurrentThread();
        query.setParameter(0, homeId);
        return query.list();
    }

}
