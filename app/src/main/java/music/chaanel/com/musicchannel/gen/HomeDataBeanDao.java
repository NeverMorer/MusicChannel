package music.chaanel.com.musicchannel.gen;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import music.chaanel.com.musicchannel.homepage.beans.HomeDataBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HOME_DATA_BEAN".
*/
public class HomeDataBeanDao extends AbstractDao<HomeDataBean, Long> {

    public static final String TABLENAME = "HOME_DATA_BEAN";

    /**
     * Properties of entity HomeDataBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property VideoId = new Property(0, Long.class, "videoId", true, "_id");
        public final static Property HomeWrapId = new Property(1, Long.class, "homeWrapId", false, "HOME_WRAP_ID");
        public final static Property Type = new Property(2, String.class, "type", false, "TYPE");
        public final static Property Title = new Property(3, String.class, "title", false, "TITLE");
        public final static Property Desc = new Property(4, String.class, "desc", false, "DESC");
        public final static Property PosterPic = new Property(5, String.class, "posterPic", false, "POSTER_PIC");
        public final static Property TotalView = new Property(6, int.class, "totalView", false, "TOTAL_VIEW");
        public final static Property ClickUrl = new Property(7, String.class, "clickUrl", false, "CLICK_URL");
        public final static Property Regdate = new Property(8, String.class, "regdate", false, "REGDATE");
        public final static Property IsVchart = new Property(9, boolean.class, "isVchart", false, "IS_VCHART");
        public final static Property DataTypeUrl = new Property(10, String.class, "dataTypeUrl", false, "DATA_TYPE_URL");
        public final static Property Ad = new Property(11, boolean.class, "ad", false, "AD");
        public final static Property Icon = new Property(12, String.class, "icon", false, "ICON");
        public final static Property PathKey = new Property(13, String.class, "pathKey", false, "PATH_KEY");
    }

    private DaoSession daoSession;

    private Query<HomeDataBean> homeWrapBean_DataQuery;

    public HomeDataBeanDao(DaoConfig config) {
        super(config);
    }
    
    public HomeDataBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HOME_DATA_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: videoId
                "\"HOME_WRAP_ID\" INTEGER," + // 1: homeWrapId
                "\"TYPE\" TEXT," + // 2: type
                "\"TITLE\" TEXT," + // 3: title
                "\"DESC\" TEXT," + // 4: desc
                "\"POSTER_PIC\" TEXT," + // 5: posterPic
                "\"TOTAL_VIEW\" INTEGER NOT NULL ," + // 6: totalView
                "\"CLICK_URL\" TEXT," + // 7: clickUrl
                "\"REGDATE\" TEXT," + // 8: regdate
                "\"IS_VCHART\" INTEGER NOT NULL ," + // 9: isVchart
                "\"DATA_TYPE_URL\" TEXT," + // 10: dataTypeUrl
                "\"AD\" INTEGER NOT NULL ," + // 11: ad
                "\"ICON\" TEXT," + // 12: icon
                "\"PATH_KEY\" TEXT);"); // 13: pathKey
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HOME_DATA_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HomeDataBean entity) {
        stmt.clearBindings();
 
        Long videoId = entity.getVideoId();
        if (videoId != null) {
            stmt.bindLong(1, videoId);
        }
 
        Long homeWrapId = entity.getHomeWrapId();
        if (homeWrapId != null) {
            stmt.bindLong(2, homeWrapId);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(3, type);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(5, desc);
        }
 
        String posterPic = entity.getPosterPic();
        if (posterPic != null) {
            stmt.bindString(6, posterPic);
        }
        stmt.bindLong(7, entity.getTotalView());
 
        String clickUrl = entity.getClickUrl();
        if (clickUrl != null) {
            stmt.bindString(8, clickUrl);
        }
 
        String regdate = entity.getRegdate();
        if (regdate != null) {
            stmt.bindString(9, regdate);
        }
        stmt.bindLong(10, entity.getIsVchart() ? 1L: 0L);
 
        String dataTypeUrl = entity.getDataTypeUrl();
        if (dataTypeUrl != null) {
            stmt.bindString(11, dataTypeUrl);
        }
        stmt.bindLong(12, entity.getAd() ? 1L: 0L);
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(13, icon);
        }
 
        String pathKey = entity.getPathKey();
        if (pathKey != null) {
            stmt.bindString(14, pathKey);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HomeDataBean entity) {
        stmt.clearBindings();
 
        Long videoId = entity.getVideoId();
        if (videoId != null) {
            stmt.bindLong(1, videoId);
        }
 
        Long homeWrapId = entity.getHomeWrapId();
        if (homeWrapId != null) {
            stmt.bindLong(2, homeWrapId);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(3, type);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(5, desc);
        }
 
        String posterPic = entity.getPosterPic();
        if (posterPic != null) {
            stmt.bindString(6, posterPic);
        }
        stmt.bindLong(7, entity.getTotalView());
 
        String clickUrl = entity.getClickUrl();
        if (clickUrl != null) {
            stmt.bindString(8, clickUrl);
        }
 
        String regdate = entity.getRegdate();
        if (regdate != null) {
            stmt.bindString(9, regdate);
        }
        stmt.bindLong(10, entity.getIsVchart() ? 1L: 0L);
 
        String dataTypeUrl = entity.getDataTypeUrl();
        if (dataTypeUrl != null) {
            stmt.bindString(11, dataTypeUrl);
        }
        stmt.bindLong(12, entity.getAd() ? 1L: 0L);
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(13, icon);
        }
 
        String pathKey = entity.getPathKey();
        if (pathKey != null) {
            stmt.bindString(14, pathKey);
        }
    }

    @Override
    protected final void attachEntity(HomeDataBean entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public HomeDataBean readEntity(Cursor cursor, int offset) {
        HomeDataBean entity = new HomeDataBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // videoId
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // homeWrapId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // type
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // title
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // desc
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // posterPic
            cursor.getInt(offset + 6), // totalView
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // clickUrl
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // regdate
            cursor.getShort(offset + 9) != 0, // isVchart
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // dataTypeUrl
            cursor.getShort(offset + 11) != 0, // ad
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // icon
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // pathKey
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HomeDataBean entity, int offset) {
        entity.setVideoId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setHomeWrapId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDesc(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPosterPic(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTotalView(cursor.getInt(offset + 6));
        entity.setClickUrl(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setRegdate(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setIsVchart(cursor.getShort(offset + 9) != 0);
        entity.setDataTypeUrl(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setAd(cursor.getShort(offset + 11) != 0);
        entity.setIcon(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setPathKey(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(HomeDataBean entity, long rowId) {
        entity.setVideoId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(HomeDataBean entity) {
        if(entity != null) {
            return entity.getVideoId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(HomeDataBean entity) {
        return entity.getVideoId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "data" to-many relationship of HomeWrapBean. */
    public List<HomeDataBean> _queryHomeWrapBean_Data(Long homeWrapId) {
        synchronized (this) {
            if (homeWrapBean_DataQuery == null) {
                QueryBuilder<HomeDataBean> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.HomeWrapId.eq(null));
                homeWrapBean_DataQuery = queryBuilder.build();
            }
        }
        Query<HomeDataBean> query = homeWrapBean_DataQuery.forCurrentThread();
        query.setParameter(0, homeWrapId);
        return query.list();
    }

}
