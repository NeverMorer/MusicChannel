package music.chaanel.com.musicchannel.gen;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import music.chaanel.com.musicchannel.homepage.beans.ArtistsBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ARTISTS_BEAN".
*/
public class ArtistsBeanDao extends AbstractDao<ArtistsBean, Long> {

    public static final String TABLENAME = "ARTISTS_BEAN";

    /**
     * Properties of entity ArtistsBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ArtistId = new Property(0, Long.class, "artistId", true, "_id");
        public final static Property HomeDataId = new Property(1, Long.class, "homeDataId", false, "HOME_DATA_ID");
        public final static Property ArtistName = new Property(2, String.class, "artistName", false, "ARTIST_NAME");
        public final static Property ArtistAvatar = new Property(3, String.class, "artistAvatar", false, "ARTIST_AVATAR");
    }

    private Query<ArtistsBean> homeDataBean_ArtistsQuery;

    public ArtistsBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ArtistsBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ARTISTS_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: artistId
                "\"HOME_DATA_ID\" INTEGER," + // 1: homeDataId
                "\"ARTIST_NAME\" TEXT," + // 2: artistName
                "\"ARTIST_AVATAR\" TEXT);"); // 3: artistAvatar
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ARTISTS_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ArtistsBean entity) {
        stmt.clearBindings();
 
        Long artistId = entity.getArtistId();
        if (artistId != null) {
            stmt.bindLong(1, artistId);
        }
 
        Long homeDataId = entity.getHomeDataId();
        if (homeDataId != null) {
            stmt.bindLong(2, homeDataId);
        }
 
        String artistName = entity.getArtistName();
        if (artistName != null) {
            stmt.bindString(3, artistName);
        }
 
        String artistAvatar = entity.getArtistAvatar();
        if (artistAvatar != null) {
            stmt.bindString(4, artistAvatar);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ArtistsBean entity) {
        stmt.clearBindings();
 
        Long artistId = entity.getArtistId();
        if (artistId != null) {
            stmt.bindLong(1, artistId);
        }
 
        Long homeDataId = entity.getHomeDataId();
        if (homeDataId != null) {
            stmt.bindLong(2, homeDataId);
        }
 
        String artistName = entity.getArtistName();
        if (artistName != null) {
            stmt.bindString(3, artistName);
        }
 
        String artistAvatar = entity.getArtistAvatar();
        if (artistAvatar != null) {
            stmt.bindString(4, artistAvatar);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ArtistsBean readEntity(Cursor cursor, int offset) {
        ArtistsBean entity = new ArtistsBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // artistId
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // homeDataId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // artistName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // artistAvatar
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ArtistsBean entity, int offset) {
        entity.setArtistId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setHomeDataId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setArtistName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setArtistAvatar(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ArtistsBean entity, long rowId) {
        entity.setArtistId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ArtistsBean entity) {
        if(entity != null) {
            return entity.getArtistId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ArtistsBean entity) {
        return entity.getArtistId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "artists" to-many relationship of HomeDataBean. */
    public List<ArtistsBean> _queryHomeDataBean_Artists(Long homeDataId) {
        synchronized (this) {
            if (homeDataBean_ArtistsQuery == null) {
                QueryBuilder<ArtistsBean> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.HomeDataId.eq(null));
                homeDataBean_ArtistsQuery = queryBuilder.build();
            }
        }
        Query<ArtistsBean> query = homeDataBean_ArtistsQuery.forCurrentThread();
        query.setParameter(0, homeDataId);
        return query.list();
    }

}
